package com.rendawei;



/*
*   设计模式的目的：
*       1. 代码重用性：相同功能的代码，不用多次编写
*       2. 可读性： 编程规范性，便于其他程序员的阅读和理解
*       3. 可扩展性： 当需要增加新的功能时，非常方便
*       4. 可靠性：当我们增加新的功能后，对原来的功能没有影响
*       5. 总结：使程序呈现高内聚，低耦合的特性
*
*
*   原则（）：
*       1. 单一职责原则：
*           对类来说，一个类应该只负责一项职责
*           提高类的可读性，可维护性
*           降低变更引起的风险
*       2. 接口隔离原则（Interface Segregation Principle）：
*           客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
*       3. 依赖倒转原则
*           面向接口编程
*           高层模块不应该依赖其底层模块，二者都应该依赖其抽象
*           使用接口或抽象类的的目的是定义好规范，而不设计具体的操作，把展现细节的任务交给他们的实现类去完成
*           底层模块尽量都要有抽象类或者接口，程序稳定性更好
*           变量的声明类型尽量是抽象类或者接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，有利于程序的扩展和优化
*
*       4. 里氏替换原则
*           在继承关系中，子类中尽量不要重写父类的方法
*
*       5. 开闭原则
*           如果需要增加一个功能，可以很方变的扩展，但是对于使用方来说，不用修改任何代码。
*           扩展开放（对于提供功能这一方，可以通过增加类来扩展功能），修改关闭（对于使用方来说）
*           用抽象构建框架，用实现扩展细节
*
*       6. 迪米特法则
*           一个类对自己依赖的类知道的越少越好
*           降低类之间的耦合
*           由于每个类都减少了不必要的依赖，因此，迪米特法则只是要求降低类之间的耦合关系，不是要求完全没有依赖关系
*       7. 合成复用原则
*           尽量使用合成、聚合的方式，而不是使用继承
*
*
*
*
*
*
* */