package com.rendawei.threadTest;


/*
*
* Java实现多线程有4中方法
*
*   1. 继承Thread类的方法
*   2. 实现Runnable接口
*   3. 实现Callable接口
*   4. 线程池
*       思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁的创建销毁、实现重复利用
*       好处：
*         提高响应速度（减少了创建新线程的时间）
*         降低资源消耗（重复利用线程池中线程，不需要每次都创建）
*         便于线程管理
*           corePoolSize： 核心池的大小
*           maximunPoolSize： 最大线程数
*           keepAliveTime：线程没有任务时最多保持多长时间后会终止
* 线程安全问题
*   问题：多个线程操作同一个数据，一个未操作完另一个进行操作，会导致数据操作不当，出现安全问题
*   1. synchronized同步代码块并添加锁，多个线程需要操作同一把锁，但是会导致代码变慢，相当于给搞成单线程了
*   2. 同步方法， 如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明在同步代码块中，在方法名中添加 synchronized
*   3. 单例模式，
*   4. 使用ReentrantLock解决线程安全问题
*
* 线程通信
*   wait()         阻塞
*   notify()       唤醒
*   notifyAll()    唤醒所有
* */